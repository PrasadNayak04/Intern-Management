Index: intern-management/src/main/java/com/robosoft/internmanagement/service/OrganizerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.jdbc.core.JdbcTemplate;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class OrganizerService\r\n{\r\n    @Autowired\r\n    JdbcTemplate jdbcTemplate;\r\n\r\n    private String query;\r\n\r\n    public String takeInterview(int applicationId){\r\n        return \"\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/service/OrganizerService.java b/intern-management/src/main/java/com/robosoft/internmanagement/service/OrganizerService.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/service/OrganizerService.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/service/OrganizerService.java	(date 1668400866342)
@@ -1,5 +1,6 @@
 package com.robosoft.internmanagement.service;
 
+import com.robosoft.internmanagement.modelAttributes.AssignBoard;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Service;
@@ -12,7 +13,18 @@
 
     private String query;
 
-    public String takeInterview(int applicationId){
-        return "";
+    public String takeInterview(AssignBoard board){
+        try{
+            query = "select status from assignBoard where applicationId=? and organizerEmail=? and status=?";
+            jdbcTemplate.queryForObject(query,String.class,board.getApplicationId(),board.getOrganizerEmail(),"new");
+
+            query = "update assignBoard set status=? where applicationId=? and organizerEmail=? and status=?";
+            jdbcTemplate.update(query,board.getStatus(),board.getApplicationId(),board.getOrganizerEmail(),"new");
+        }
+        catch (Exception e)
+        {
+            return "Invalid information";
+        }
+        return "Interview Completed Successfully";
     }
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/service/RecruiterService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.service;\r\n\r\nimport com.robosoft.internmanagement.model.*;\r\nimport com.robosoft.internmanagement.modelAttributes.Applications;\r\nimport com.robosoft.internmanagement.modelAttributes.AssignBoard;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.jdbc.core.BeanPropertyRowMapper;\r\nimport org.springframework.jdbc.core.JdbcTemplate;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class RecruiterService\r\n{\r\n    @Autowired\r\n    JdbcTemplate jdbcTemplate;\r\n\r\n    String query;\r\n    public List<Organizer> getOrganizer()\r\n    {\r\n        List<Organizer> organizerList = new ArrayList<>();\r\n        query = \"select memberProfile.name, memberProfile.emailId, memberProfile.photoPath from memberProfile, AssignBoard where memberProfile.emailId = AssignBoard.organizerEmail and assignBoard.recruiterEmail = '\" + MemberService.getCurrentUser() + \"'\";\r\n\r\n        jdbcTemplate.query(query,\r\n                (resultSet, no) -> {\r\n                    Organizer organizer = new Organizer();\r\n                    organizer.setName(resultSet.getString(1));\r\n                    organizer.setProfile(resultSet.getString(3));\r\n                    organizer.setInterviews(getInterviewsCount(resultSet.getString(2), MemberService.getCurrentUser()));\r\n\r\n                    organizerList.add(organizer);\r\n                    return organizer;\r\n                });\r\n        return organizerList;\r\n    }\r\n\r\n    public int getInterviewsCount(String organizerEmail, String emailId){\r\n        query = \"select count(*) from AssignBoard where OrganizerEmail = ? and recruiterEmail = ?\";\r\n        return jdbcTemplate.queryForObject(query, Integer.class, organizerEmail, MemberService.getCurrentUser());\r\n    }\r\n\r\n    public Summary getSummary()\r\n    {\r\n        Summary summary=null;\r\n        query = \"select count(*) from assignBoard where year(date)=year(curDate()) and month(date)=month(curDate()) and recruiterMail=?\";\r\n        int shortlisted = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());\r\n        summary.setShortlisted(shortlisted);\r\n        query = \"select count(*) from assignBoard where year(date)=year(curDate()) and month(date)=month(curDate()) and recruiterMail=?\";\r\n        int onHold = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());\r\n        summary.setOnHold(onHold);\r\n        query = \"select count(*) from assignBoard where year(date)=year(curDate) and month(date)=month(curDate) and recruiterMail=?\";\r\n        int rejected = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());\r\n        summary.setRejected(rejected);\r\n        int applications=shortlisted + onHold + rejected;\r\n        summary.setApplications(applications);\r\n        return summary;\r\n    }\r\n\r\n    public int cvCount() //w\r\n    {\r\n        query = \"select count(applicationId) from assignBoard where recruiterEmail=? and organizerEmail is null\";\r\n        return jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());\r\n    }\r\n\r\n    public LoggedProfile getProfile()\r\n    {\r\n        query = \"select name,designation,profilePath from memberProfile where emailId=?\";\r\n        return jdbcTemplate.queryForObject(query,new BeanPropertyRowMapper<>(LoggedProfile.class),MemberService.getCurrentUser());\r\n    }\r\n\r\n    public NotificationDisplay notification() {\r\n        String notification = \"select message from notifications where emailId=? limit 1\";\r\n        String notificationType = jdbcTemplate.queryForObject(\"select type from notifications where emailId=? limit 1\", String.class, MemberService.getCurrentUser());\r\n        int eventId = jdbcTemplate.queryForObject(\"select eventId from notifications where emailId=? limit 1\", Integer.class, MemberService.getCurrentUser());\r\n        if (notificationType.equalsIgnoreCase(\"Invite\")) {\r\n            String profileImage = \"select photoPath from memberProfile,notifications,events,eventInvites where notifications.emailId=events.creatorEmail and events.eventId=eventInvites.eventId and eventInvites.invitedEmail=memberProfile.emailId and notifications.emailId=? and notifications.eventId=?\";\r\n            List<String> Images = jdbcTemplate.query(profileImage, new BeanPropertyRowMapper<>(String.class),MemberService.getCurrentUser(), eventId);\r\n            NotificationDisplay display = jdbcTemplate.queryForObject(notification, new BeanPropertyRowMapper<>(NotificationDisplay.class), MemberService.getCurrentUser());\r\n            display.setImages(Images);\r\n            return display;\r\n        } else {\r\n            NotificationDisplay display = jdbcTemplate.queryForObject(notification, new BeanPropertyRowMapper<>(NotificationDisplay.class), MemberService.getCurrentUser());\r\n            return display;\r\n        }\r\n    }\r\n\r\n    public List<CvAnalysis> cvAnalysisPage()\r\n    {\r\n        query = \"select applications.designation,application.count(designation),date,status,location from applications,technologies where applications.designation = technologies.designation and date=curDate() group by designation\";\r\n        return jdbcTemplate.query(query,new BeanPropertyRowMapper<>(CvAnalysis.class));\r\n    }\r\n\r\n    public CvAnalysis searchDesignation(String designation)\r\n    {\r\n        query  = \"select applications.designation,application.count(designation),date,status,location from applications,technologies where applications.designation = technologies.designation and date=curDate() and designation=? group by designation\";\r\n        return jdbcTemplate.queryForObject(query,new BeanPropertyRowMapper<>(CvAnalysis.class),designation);\r\n    }\r\n\r\n    public List<Applications>  getNotAssignedApplicants()\r\n    {\r\n        query = \"select applications.applicationId,emailId,designation,location,date from applications,assignBoard where applications.applicationId=assignBoard.applicationId and organizerEmail is null\";\r\n        return jdbcTemplate.query(query,new BeanPropertyRowMapper<>(Applications.class));\r\n    }\r\n\r\n    public String assignOrganizer(AssignBoard assignBoard)\r\n    {\r\n        System.out.println(MemberService.getCurrentUser());\r\n        System.out.println(MemberService.getCurrentUser());\r\n        try\r\n        {\r\n            query = \"select name from memberProfile where emailId=? and position=?\";\r\n            jdbcTemplate.queryForObject(query, String.class,assignBoard.getOrganizerEmail(),\"Organizer\");\r\n\r\n            try\r\n            {\r\n                query = \"update assignBoard set organizerEmail =?, assignDate=curDate() where recruiterEmail=? and applicationId=?\";\r\n                jdbcTemplate.update(query,assignBoard.getOrganizerEmail(),MemberService.getCurrentUser(),assignBoard.getApplicationId());\r\n                return \"Candidate assigned successfully\";\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                e.printStackTrace();\r\n                 return \"Give correct information\";\r\n            }\r\n            }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n            return \"Select correct Organizer to assign\";\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/service/RecruiterService.java b/intern-management/src/main/java/com/robosoft/internmanagement/service/RecruiterService.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/service/RecruiterService.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/service/RecruiterService.java	(date 1668506257061)
@@ -3,11 +3,13 @@
 import com.robosoft.internmanagement.model.*;
 import com.robosoft.internmanagement.modelAttributes.Applications;
 import com.robosoft.internmanagement.modelAttributes.AssignBoard;
+import com.robosoft.internmanagement.modelAttributes.CandidateInvites;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.jdbc.core.BeanPropertyRowMapper;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDate;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -20,20 +22,8 @@
     String query;
     public List<Organizer> getOrganizer()
     {
-        List<Organizer> organizerList = new ArrayList<>();
-        query = "select memberProfile.name, memberProfile.emailId, memberProfile.photoPath from memberProfile, AssignBoard where memberProfile.emailId = AssignBoard.organizerEmail and assignBoard.recruiterEmail = '" + MemberService.getCurrentUser() + "'";
-
-        jdbcTemplate.query(query,
-                (resultSet, no) -> {
-                    Organizer organizer = new Organizer();
-                    organizer.setName(resultSet.getString(1));
-                    organizer.setProfile(resultSet.getString(3));
-                    organizer.setInterviews(getInterviewsCount(resultSet.getString(2), MemberService.getCurrentUser()));
-
-                    organizerList.add(organizer);
-                    return organizer;
-                });
-        return organizerList;
+        query = "select memberProfile.name,memberProfile.photoUrl,count(assignBoard.organizerEmail) as interviews from memberProfile inner join assignBoard on memberProfile.emailId=assignBoard.organizerEmail";
+        return jdbcTemplate.query(query,new BeanPropertyRowMapper<>(Organizer.class));
     }
 
     public int getInterviewsCount(String organizerEmail, String emailId){
@@ -43,15 +33,15 @@
 
     public Summary getSummary()
     {
-        Summary summary=null;
-        query = "select count(*) from assignBoard where year(date)=year(curDate()) and month(date)=month(curDate()) and recruiterMail=?";
-        int shortlisted = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());
+        Summary summary = new Summary();
+        query = "select count(*) from assignBoard where year(AssignDate)=year(curDate()) and month(assignDate)=month(curDate()) and status = ? and recruiterEmail=?";
+        int shortlisted = jdbcTemplate.queryForObject(query, Integer.class,"Shortlisted",MemberService.getCurrentUser());
         summary.setShortlisted(shortlisted);
-        query = "select count(*) from assignBoard where year(date)=year(curDate()) and month(date)=month(curDate()) and recruiterMail=?";
-        int onHold = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());
+        query = "select count(*) from assignBoard where year(assignDate)=year(curDate()) and month(assignDate)=month(curDate()) and status=? and recruiterEmail=?";
+        int onHold = jdbcTemplate.queryForObject(query, Integer.class,"New",MemberService.getCurrentUser());
         summary.setOnHold(onHold);
-        query = "select count(*) from assignBoard where year(date)=year(curDate) and month(date)=month(curDate) and recruiterMail=?";
-        int rejected = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());
+        query = "select count(*) from assignBoard where year(assignDate)=year(curDate()) and month(assignDate)=month(curDate()) and status=? and recruiterEmail=?";
+        int rejected = jdbcTemplate.queryForObject(query, Integer.class,"Rejected",MemberService.getCurrentUser());
         summary.setRejected(rejected);
         int applications=shortlisted + onHold + rejected;
         summary.setApplications(applications);
@@ -66,7 +56,7 @@
 
     public LoggedProfile getProfile()
     {
-        query = "select name,designation,profilePath from memberProfile where emailId=?";
+        query = "select name,designation,photoUrl from memberProfile where emailId=?";
         return jdbcTemplate.queryForObject(query,new BeanPropertyRowMapper<>(LoggedProfile.class),MemberService.getCurrentUser());
     }
 
@@ -88,7 +78,7 @@
 
     public List<CvAnalysis> cvAnalysisPage()
     {
-        query = "select applications.designation,application.count(designation),date,status,location from applications,technologies where applications.designation = technologies.designation and date=curDate() group by designation";
+        query = "select applications.designation,count(applications.designation),date,status,location from applications,technologies where applications.designation = technologies.designation and date=curDate() group by designation";
         return jdbcTemplate.query(query,new BeanPropertyRowMapper<>(CvAnalysis.class));
     }
 
@@ -98,7 +88,7 @@
         return jdbcTemplate.queryForObject(query,new BeanPropertyRowMapper<>(CvAnalysis.class),designation);
     }
 
-    public List<Applications>  getNotAssignedApplicants()
+    public List<Applications> getNotAssignedApplicants()
     {
         query = "select applications.applicationId,emailId,designation,location,date from applications,assignBoard where applications.applicationId=assignBoard.applicationId and organizerEmail is null";
         return jdbcTemplate.query(query,new BeanPropertyRowMapper<>(Applications.class));
@@ -106,30 +96,46 @@
 
     public String assignOrganizer(AssignBoard assignBoard)
     {
-        System.out.println(MemberService.getCurrentUser());
-        System.out.println(MemberService.getCurrentUser());
-        try
-        {
+        try {
             query = "select name from memberProfile where emailId=? and position=?";
             jdbcTemplate.queryForObject(query, String.class,assignBoard.getOrganizerEmail(),"Organizer");
 
-            try
-            {
+            try {
                 query = "update assignBoard set organizerEmail =?, assignDate=curDate() where recruiterEmail=? and applicationId=?";
                 jdbcTemplate.update(query,assignBoard.getOrganizerEmail(),MemberService.getCurrentUser(),assignBoard.getApplicationId());
                 return "Candidate assigned successfully";
             }
             catch (Exception e)
             {
-                e.printStackTrace();
                  return "Give correct information";
             }
-            }
-        catch (Exception e)
-        {
-            e.printStackTrace();
+        } catch (Exception e) {
             return "Select correct Organizer to assign";
         }
     }
 
+    public List<AssignBoardPage> getAssignBoardPage()
+    {
+        query = "select candidateProfile.name,applications.designation,applications.location,assignBoard.assignDate,memberProfile.name as organizer  from memberProfile inner join assignBoard on memberProfile.emailId=assignBoard.organizerEmail inner join applications on assignBoard.applicationId=applications.applicationId inner join candidateProfile on candidateProfile.emailId=applications.emailId where recruiterEmail=?";
+        return jdbcTemplate.query(query,new BeanPropertyRowMapper<>(AssignBoardPage.class),MemberService.getCurrentUser());
+    }
+
+    public List<RejectedCv> getRejectedCvPage()
+    {
+        query = "select candidateProfile.name,documents.ImageUrl,applications.designation,applications.location,candidateProfile.mobileNumber from documents inner join candidateProfile on documents.emailId=candidateProfile.emailId inner join applications on candidateProfile.emailId=applications.emailId inner join assignBoard on applications.applicationId=assignBoard.applicationId where assignBoard.status=?";
+        return jdbcTemplate.query(query,new BeanPropertyRowMapper<>(RejectedCv.class),"Rejected");
+    }
+
+//    public Invite getList()
+//    {
+//        Invite invite=new Invite();
+//        query = "select count(*) from candidateInvites where date=curDate() and fromEmail=?";
+//        int today = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());
+//        invite.setToday(today);
+//        query = "select count(*) from candidateInvites where date=DATE_SUB(CURDATE(),INTERVAL 1 DAY) and fromEmail=?";
+//        int yesterday = jdbcTemplate.queryForObject(query, Integer.class,MemberService.getCurrentUser());
+//        invite.setYesterday(yesterday);
+//        //query = "select count(*) from candidateInvites where date"
+//    }
+
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/service/JwtSecurity/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.service.JwtSecurity;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\n\r\n@Configuration\r\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private JwtAuthenticationEntryPoint authenticationEntryPoint;\r\n    @Autowired\r\n    private UserDetailsService userDetailsService;\r\n    @Autowired\r\n    private JwtFilter filter;\r\n\r\n    @Autowired\r\n    private BeanStore beanStore;\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(beanStore.passwordEncoder());\r\n    }\r\n\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws\r\n            Exception {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.csrf().disable()\r\n                .authorizeRequests().antMatchers(\"/intern-management\",\"/intern-management/member-register\", \"/intern-management/member-login\", \"/candidate-register\",\"/cv-count\",\"/assign-organizer\").permitAll()\r\n                .anyRequest().authenticated()\r\n                .and()\r\n                .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)\r\n                .and()\r\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\r\n        http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/service/JwtSecurity/WebSecurityConfig.java b/intern-management/src/main/java/com/robosoft/internmanagement/service/JwtSecurity/WebSecurityConfig.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/service/JwtSecurity/WebSecurityConfig.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/service/JwtSecurity/WebSecurityConfig.java	(date 1668486716589)
@@ -39,7 +39,7 @@
     @Override
     protected void configure(HttpSecurity http) throws Exception {
         http.csrf().disable()
-                .authorizeRequests().antMatchers("/intern-management","/intern-management/member-register", "/intern-management/member-login", "/candidate-register","/cv-count","/assign-organizer").permitAll()
+                .authorizeRequests().antMatchers("/intern-management","/intern-management/member-register","/invite", "/intern-management/member-login","/cv-analysis", "/candidate-register","/logged-profile","/organizer","/assign-organizer","/take-interview").permitAll()
                 .anyRequest().authenticated()
                 .and()
                 .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)
Index: intern-management/src/main/java/com/robosoft/internmanagement/service/EmailService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.jdbc.core.JdbcTemplate;\r\nimport org.springframework.mail.SimpleMailMessage;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Random;\r\n\r\n@Service\r\npublic class EmailService\r\n{\r\n\r\n    @Autowired\r\n    JdbcTemplate jdbcTemplate;\r\n\r\n    @Autowired\r\n    private JavaMailSender javaMailSender;\r\n\r\n    @Value(\"${spring.mail.username}\")\r\n    private String sender;\r\n\r\n    public boolean sendEmail(String toEmail)\r\n    {\r\n\r\n        boolean flag = false;\r\n\r\n        String host = \"smtp.gmail.com\";\r\n        String subject = \"OTP from Intern Management\";\r\n\r\n        Random random = new Random();\r\n        int otp;\r\n\r\n        do\r\n        {\r\n            otp = random.nextInt(9999);\r\n        }\r\n        while(String.valueOf(otp).length() < 3);\r\n\r\n\r\n        String message = \"Please use OTP \" + otp + \" for your account password reset request\";\r\n\r\n        try\r\n        {\r\n\r\n            SimpleMailMessage mailMessage = new SimpleMailMessage();\r\n\r\n            mailMessage.setFrom(sender);\r\n            mailMessage.setTo(toEmail);\r\n            mailMessage.setSubject(subject);\r\n            mailMessage.setText(message);\r\n\r\n            javaMailSender.send(mailMessage);\r\n            String OTP=String.valueOf(otp);\r\n            try\r\n            {\r\n                jdbcTemplate.queryForObject(\"select otp from user where emailId=?\", String.class,toEmail);\r\n                jdbcTemplate.update(\"update user set otp=?,expireTime=? where emailId=?\",OTP,(System.currentTimeMillis()/1000)+120,toEmail);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                insert(toEmail,OTP);\r\n            }\r\n            flag = true;\r\n\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        finally\r\n        {\r\n            return flag;\r\n        }\r\n\r\n    }\r\n\r\n    public void insert(String emailId,String code)\r\n    {\r\n        jdbcTemplate.update(\"insert into forgotPassword values (?,?,?,?)\",emailId,null,code,(System.currentTimeMillis()/1000)+120);\r\n    }\r\n\r\n\r\n    public String verification(String emailId,String otp)\r\n    {\r\n        String verify=jdbcTemplate.queryForObject(\"select otp from forgotPassword where emailId=?\", String.class,emailId);\r\n        System.out.println(verify);\r\n        System.out.println(otp);\r\n        if(otp.equals(verify))\r\n        {\r\n            return \"Done\";\r\n        }\r\n        return \"Invalid OTP\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/service/EmailService.java b/intern-management/src/main/java/com/robosoft/internmanagement/service/EmailService.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/service/EmailService.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/service/EmailService.java	(date 1668494435161)
@@ -1,5 +1,6 @@
 package com.robosoft.internmanagement.service;
 
+import com.robosoft.internmanagement.modelAttributes.CandidateInvites;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.jdbc.core.JdbcTemplate;
@@ -7,6 +8,7 @@
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDate;
 import java.util.Random;
 
 @Service
@@ -87,12 +89,58 @@
     public String verification(String emailId,String otp)
     {
         String verify=jdbcTemplate.queryForObject("select otp from forgotPassword where emailId=?", String.class,emailId);
-        System.out.println(verify);
-        System.out.println(otp);
         if(otp.equals(verify))
         {
             return "Done";
         }
         return "Invalid OTP";
     }
+
+    public boolean sendInviteEmail(CandidateInvites invites)
+    {
+
+        boolean flag = false;
+
+        String host = "smtp.gmail.com";
+        String subject = "Invite from Robosoft Technologies";
+
+
+        String message = "Inviting to join us as a intern.";
+
+        try
+        {
+
+            SimpleMailMessage mailMessage = new SimpleMailMessage();
+
+            mailMessage.setFrom(MemberService.getCurrentUser());
+            mailMessage.setTo(invites.getCandidateEmail());
+            mailMessage.setSubject(subject);
+            mailMessage.setText(message);
+
+            javaMailSender.send(mailMessage);
+            try
+            {
+                LocalDate date = LocalDate.now();
+                String query = "insert into candidateInvites(fromEmail,candidateName,designation,mobileNumber,location,jobDetails,candidateEmail,date) values(?,?,?,?,?,?,?,?)";
+                jdbcTemplate.update(query,MemberService.getCurrentUser(),invites.getCandidateName(),invites.getDesignation(),invites.getMobileNumber(),invites.getLocation(),invites.getJobDetails(),invites.getCandidateEmail(),date);
+
+            }
+            catch (Exception e)
+            {
+                flag = false;
+            }
+            flag = true;
+
+        }
+        catch (Exception e)
+        {
+            e.printStackTrace();
+        }
+
+        finally
+        {
+            return flag;
+        }
+
+    }
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/model/Organizer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.model;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class Organizer\r\n{\r\n    private String name;\r\n    private String profile;\r\n    private int interviews;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/model/Organizer.java b/intern-management/src/main/java/com/robosoft/internmanagement/model/Organizer.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/model/Organizer.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/model/Organizer.java	(date 1668425874538)
@@ -5,7 +5,9 @@
 @Data
 public class Organizer
 {
+
     private String name;
-    private String profile;
+    private String photoUrl;
     private int interviews;
+
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/model/LoggedProfile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.model;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class LoggedProfile\r\n{\r\n    private String name;\r\n    private String designation;\r\n    private String profileImage;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/model/LoggedProfile.java b/intern-management/src/main/java/com/robosoft/internmanagement/model/LoggedProfile.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/model/LoggedProfile.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/model/LoggedProfile.java	(date 1668420834474)
@@ -5,7 +5,9 @@
 @Data
 public class LoggedProfile
 {
+
     private String name;
     private String designation;
-    private String profileImage;
+    private String photoUrl;
+
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/model/Summary.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.model;\r\n\r\nimport lombok.Data;\r\n\r\n@Data\r\npublic class Summary\r\n{\r\n    private int applications;\r\n    private int shortlisted;\r\n    private int onHold;\r\n    private int rejected;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/model/Summary.java b/intern-management/src/main/java/com/robosoft/internmanagement/model/Summary.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/model/Summary.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/model/Summary.java	(date 1668411115046)
@@ -5,8 +5,10 @@
 @Data
 public class Summary
 {
+
     private int applications;
     private int shortlisted;
     private int onHold;
     private int rejected;
+
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/model/AssignBoardPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/model/AssignBoardPage.java b/intern-management/src/main/java/com/robosoft/internmanagement/model/AssignBoardPage.java
new file mode 100644
--- /dev/null	(date 1668402321078)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/model/AssignBoardPage.java	(date 1668402321078)
@@ -0,0 +1,15 @@
+package com.robosoft.internmanagement.model;
+
+import lombok.Data;
+
+import java.sql.Date;
+@Data
+public class AssignBoardPage
+{
+        private String name;
+        private String designation;
+        private String location;
+        private Date assignDate;
+        private String organizer;
+
+}
Index: intern-management/src/main/java/com/robosoft/internmanagement/model/NotificationDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.model;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.util.List;\r\n\r\n@Data\r\npublic class NotificationDisplay\r\n{\r\n    private String message;\r\n    private List<String> Images;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/model/NotificationDisplay.java b/intern-management/src/main/java/com/robosoft/internmanagement/model/NotificationDisplay.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/model/NotificationDisplay.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/model/NotificationDisplay.java	(date 1668410513183)
@@ -7,6 +7,8 @@
 @Data
 public class NotificationDisplay
 {
+
     private String message;
     private List<String> Images;
+
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/model/RejectedCv.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/model/RejectedCv.java b/intern-management/src/main/java/com/robosoft/internmanagement/model/RejectedCv.java
new file mode 100644
--- /dev/null	(date 1668408655733)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/model/RejectedCv.java	(date 1668408655733)
@@ -0,0 +1,15 @@
+package com.robosoft.internmanagement.model;
+
+import lombok.Data;
+
+@Data
+public class RejectedCv
+{
+
+    private String name;
+    private String ImageUrl;
+    private String designation;
+    private String location;
+    private long mobileNumber;
+
+}
Index: intern-management/src/main/java/com/robosoft/internmanagement/model/CvAnalysis.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.model;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\npublic class CvAnalysis\r\n{\r\n    private String designation;\r\n    private int applicants;\r\n    private Date recievedDate;\r\n    private String status;\r\n    private String location;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/model/CvAnalysis.java b/intern-management/src/main/java/com/robosoft/internmanagement/model/CvAnalysis.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/model/CvAnalysis.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/model/CvAnalysis.java	(date 1668410513325)
@@ -7,9 +7,11 @@
 @Data
 public class CvAnalysis
 {
+
     private String designation;
     private int applicants;
     private Date recievedDate;
     private String status;
     private String location;
+
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/Applications.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.modelAttributes;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.RequiredArgsConstructor;\r\n\r\nimport java.sql.Date;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@RequiredArgsConstructor\r\npublic class Applications {\r\n\r\n    private int applicationId;\r\n    private String emailId;\r\n    private String designation;\r\n    private String location;\r\n    private Date date;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/Applications.java b/intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/Applications.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/Applications.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/Applications.java	(date 1668410513244)
@@ -11,7 +11,6 @@
 @RequiredArgsConstructor
 public class Applications {
 
-    private int applicationId;
     private String emailId;
     private String designation;
     private String location;
Index: intern-management/src/main/java/com/robosoft/internmanagement/controller/OrganizerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/controller/OrganizerController.java b/intern-management/src/main/java/com/robosoft/internmanagement/controller/OrganizerController.java
new file mode 100644
--- /dev/null	(date 1668400220722)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/controller/OrganizerController.java	(date 1668400220722)
@@ -0,0 +1,23 @@
+package com.robosoft.internmanagement.controller;
+
+import com.robosoft.internmanagement.modelAttributes.AssignBoard;
+import com.robosoft.internmanagement.service.OrganizerService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.expression.spel.ast.Assign;
+import org.springframework.web.bind.annotation.ModelAttribute;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+public class OrganizerController
+{
+    @Autowired
+    OrganizerService organizerService;
+
+    @PutMapping("/take-interview")
+    public String assignStatus(@ModelAttribute AssignBoard board)
+    {
+       return organizerService.takeInterview(board);
+    }
+
+}
Index: intern-management/src/main/java/com/robosoft/internmanagement/controller/RecruiterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.robosoft.internmanagement.controller;\r\n\r\nimport com.robosoft.internmanagement.model.*;\r\nimport com.robosoft.internmanagement.modelAttributes.Applications;\r\nimport com.robosoft.internmanagement.modelAttributes.AssignBoard;\r\nimport com.robosoft.internmanagement.service.EmailService;\r\nimport com.robosoft.internmanagement.service.MemberService;\r\nimport com.robosoft.internmanagement.service.RecruiterService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\npublic class RecruiterController\r\n{\r\n    @Autowired\r\n    EmailService emailService;\r\n\r\n    @Autowired\r\n    RecruiterService recruiterService;\r\n\r\n    @PostMapping(\"/send-otp\")\r\n    public ResponseEntity<?> sendMail(@RequestParam String toEmail){\r\n        boolean mailSent = emailService.sendEmail(toEmail);\r\n\r\n        if(mailSent){\r\n            return ResponseEntity.ok().body(\"Otp has been sent to the email \\\"\" + toEmail + \"\\\"\");\r\n        }else{\r\n            return ResponseEntity.status(HttpStatus.valueOf(\"Please provide valid email.\")).build();\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/verify-otp\")\r\n    public String verify(@RequestParam String emailId,@RequestParam String otp)\r\n    {\r\n        return emailService.verification(emailId,otp);\r\n    }\r\n\r\n    @GetMapping(\"/organizer\")\r\n    public List<Organizer> getList()\r\n    {\r\n        return recruiterService.getOrganizer();\r\n    }\r\n\r\n    @GetMapping(\"/summary\")\r\n    public Summary getSummary()\r\n    {\r\n        return recruiterService.getSummary();\r\n    }\r\n\r\n    @GetMapping(\"/cv-count\")\r\n    public int getCvCount()\r\n    {\r\n        return recruiterService.cvCount();\r\n    }\r\n\r\n    @GetMapping(\"/logged-profile\")\r\n    public LoggedProfile getProfile()\r\n    {\r\n        return recruiterService.getProfile();\r\n    }\r\n\r\n    @GetMapping(\"/notification-display\")\r\n    public NotificationDisplay getNotifications()\r\n    {\r\n        return recruiterService.notification();\r\n    }\r\n\r\n    @GetMapping(\"/cv-analysis\")\r\n    public List<CvAnalysis> getCv()\r\n    {\r\n        return recruiterService.cvAnalysisPage();\r\n    }\r\n\r\n    @GetMapping(\"/search/{designation}\")\r\n    public CvAnalysis search(@PathVariable String designation)\r\n    {\r\n        return recruiterService.searchDesignation(designation);\r\n    }\r\n\r\n    @GetMapping(\"/get-applicants\")\r\n    public List<Applications> getApplicants()\r\n    {\r\n        return recruiterService.getNotAssignedApplicants();\r\n    }\r\n\r\n    @PutMapping(\"/assign-organizer\")\r\n    public String setOrganizer(@ModelAttribute AssignBoard assignBoard)\r\n    {\r\n        System.out.println(MemberService.getCurrentUser());\r\n        return recruiterService.assignOrganizer(assignBoard);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/controller/RecruiterController.java b/intern-management/src/main/java/com/robosoft/internmanagement/controller/RecruiterController.java
--- a/intern-management/src/main/java/com/robosoft/internmanagement/controller/RecruiterController.java	(revision 4c873954cc0d68b73fe39794ea671e1295fea60a)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/controller/RecruiterController.java	(date 1668494701567)
@@ -3,6 +3,7 @@
 import com.robosoft.internmanagement.model.*;
 import com.robosoft.internmanagement.modelAttributes.Applications;
 import com.robosoft.internmanagement.modelAttributes.AssignBoard;
+import com.robosoft.internmanagement.modelAttributes.CandidateInvites;
 import com.robosoft.internmanagement.service.EmailService;
 import com.robosoft.internmanagement.service.MemberService;
 import com.robosoft.internmanagement.service.RecruiterService;
@@ -12,6 +13,7 @@
 import org.springframework.web.bind.annotation.*;
 
 import java.util.List;
+import java.util.Optional;
 
 @RestController
 public class RecruiterController
@@ -33,6 +35,18 @@
         }
     }
 
+    @GetMapping("/invite")
+    public ResponseEntity<String> invites(@ModelAttribute CandidateInvites invites)
+    {
+        boolean result = emailService.sendInviteEmail(invites);
+
+        if (result){
+            return ResponseEntity.ok().body("Invite sent to " + invites.getCandidateName());
+        }else {
+            return ResponseEntity.status(HttpStatus.valueOf("Insufficient information")).build();
+        }
+    }
+
     @PutMapping("/verify-otp")
     public String verify(@RequestParam String emailId,@RequestParam String otp)
     {
@@ -40,9 +54,14 @@
     }
 
     @GetMapping("/organizer")
-    public List<Organizer> getList()
+    public ResponseEntity<List<Organizer>> getList()
     {
-        return recruiterService.getOrganizer();
+        List<Organizer> list = recruiterService.getOrganizer();
+        if(list == null)
+        {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
+        }else
+            return ResponseEntity.of(Optional.of(list));
     }
 
     @GetMapping("/summary")
@@ -88,10 +107,25 @@
     }
 
     @PutMapping("/assign-organizer")
-    public String setOrganizer(@ModelAttribute AssignBoard assignBoard)
+    public ResponseEntity<String> setOrganizer(@ModelAttribute AssignBoard assignBoard)
+    {
+        String result = recruiterService.assignOrganizer(assignBoard);
+        if(result==null)
+        {
+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
+        }else
+            return ResponseEntity.of(Optional.of(result));
+    }
+
+    @GetMapping("/get-assignboard")
+    public List<AssignBoardPage> getPage()
     {
-        System.out.println(MemberService.getCurrentUser());
-        return recruiterService.assignOrganizer(assignBoard);
+        return recruiterService.getAssignBoardPage();
     }
 
+    @GetMapping("/rejected-cv")
+    public List<RejectedCv> getCvPage()
+    {
+        return recruiterService.getRejectedCvPage();
+    }
 }
Index: intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/CandidateInvites.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/CandidateInvites.java b/intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/CandidateInvites.java
new file mode 100644
--- /dev/null	(date 1668512201920)
+++ b/intern-management/src/main/java/com/robosoft/internmanagement/modelAttributes/CandidateInvites.java	(date 1668512201920)
@@ -0,0 +1,20 @@
+package com.robosoft.internmanagement.modelAttributes;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.RequiredArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@RequiredArgsConstructor
+public class CandidateInvites
+{
+
+    private String candidateName;
+    private String designation;
+    private long mobileNumber;
+    private String location;
+    private String jobDetails;
+    private String candidateEmail;
+
+}
